// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "ContactSectionService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ContactRequest
 */
export interface ContactRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string tile = 2;
     */
    tile: string;
    /**
     * @generated from protobuf field: string centered = 3;
     */
    centered: string;
    /**
     * @generated from protobuf field: string active = 4;
     */
    active: string;
}
/**
 * @generated from protobuf message ContactResponse
 */
export interface ContactResponse {
    /**
     * @generated from protobuf field: string tile = 1;
     */
    tile: string;
    /**
     * @generated from protobuf field: string centered = 2;
     */
    centered: string;
    /**
     * @generated from protobuf field: string active = 3;
     */
    active: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ContactRequest$Type extends MessageType<ContactRequest> {
    constructor() {
        super("ContactRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "centered", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "active", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContactRequest>): ContactRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.tile = "";
        message.centered = "";
        message.active = "";
        if (value !== undefined)
            reflectionMergePartial<ContactRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactRequest): ContactRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string tile */ 2:
                    message.tile = reader.string();
                    break;
                case /* string centered */ 3:
                    message.centered = reader.string();
                    break;
                case /* string active */ 4:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string tile = 2; */
        if (message.tile !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tile);
        /* string centered = 3; */
        if (message.centered !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.centered);
        /* string active = 4; */
        if (message.active !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ContactRequest
 */
export const ContactRequest = new ContactRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContactResponse$Type extends MessageType<ContactResponse> {
    constructor() {
        super("ContactResponse", [
            { no: 1, name: "tile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "centered", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "active", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContactResponse>): ContactResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tile = "";
        message.centered = "";
        message.active = "";
        if (value !== undefined)
            reflectionMergePartial<ContactResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactResponse): ContactResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tile */ 1:
                    message.tile = reader.string();
                    break;
                case /* string centered */ 2:
                    message.centered = reader.string();
                    break;
                case /* string active */ 3:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tile = 1; */
        if (message.tile !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tile);
        /* string centered = 2; */
        if (message.centered !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.centered);
        /* string active = 3; */
        if (message.active !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ContactResponse
 */
export const ContactResponse = new ContactResponse$Type();
/**
 * @generated ServiceType for protobuf service ContactSectionService
 */
export const ContactSectionService = new ServiceType("ContactSectionService", [
    { name: "UpdateContactSection", options: {}, I: ContactRequest, O: ContactResponse }
]);
