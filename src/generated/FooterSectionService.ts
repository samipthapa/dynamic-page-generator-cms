// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "FooterSectionService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message FooterRequest
 */
export interface FooterRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string basic = 2;
     */
    basic: string;
    /**
     * @generated from protobuf field: string centered = 3;
     */
    centered: string;
    /**
     * @generated from protobuf field: string active = 4;
     */
    active: string;
}
/**
 * @generated from protobuf message FooterResponse
 */
export interface FooterResponse {
    /**
     * @generated from protobuf field: string basic = 1;
     */
    basic: string;
    /**
     * @generated from protobuf field: string centered = 2;
     */
    centered: string;
    /**
     * @generated from protobuf field: string active = 3;
     */
    active: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FooterRequest$Type extends MessageType<FooterRequest> {
    constructor() {
        super("FooterRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "basic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "centered", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "active", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FooterRequest>): FooterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.basic = "";
        message.centered = "";
        message.active = "";
        if (value !== undefined)
            reflectionMergePartial<FooterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FooterRequest): FooterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string basic */ 2:
                    message.basic = reader.string();
                    break;
                case /* string centered */ 3:
                    message.centered = reader.string();
                    break;
                case /* string active */ 4:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FooterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string basic = 2; */
        if (message.basic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.basic);
        /* string centered = 3; */
        if (message.centered !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.centered);
        /* string active = 4; */
        if (message.active !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FooterRequest
 */
export const FooterRequest = new FooterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FooterResponse$Type extends MessageType<FooterResponse> {
    constructor() {
        super("FooterResponse", [
            { no: 1, name: "basic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "centered", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "active", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FooterResponse>): FooterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.basic = "";
        message.centered = "";
        message.active = "";
        if (value !== undefined)
            reflectionMergePartial<FooterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FooterResponse): FooterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string basic */ 1:
                    message.basic = reader.string();
                    break;
                case /* string centered */ 2:
                    message.centered = reader.string();
                    break;
                case /* string active */ 3:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FooterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string basic = 1; */
        if (message.basic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.basic);
        /* string centered = 2; */
        if (message.centered !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.centered);
        /* string active = 3; */
        if (message.active !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FooterResponse
 */
export const FooterResponse = new FooterResponse$Type();
/**
 * @generated ServiceType for protobuf service FooterSectionService
 */
export const FooterSectionService = new ServiceType("FooterSectionService", [
    { name: "UpdateFooterSection", options: {}, I: FooterRequest, O: FooterResponse }
]);
