// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "DetailSectionService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message DetailRequest
 */
export interface DetailRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string split = 2;
     */
    split: string;
    /**
     * @generated from protobuf field: string tile = 3;
     */
    tile: string;
    /**
     * @generated from protobuf field: string active = 4;
     */
    active: string;
}
/**
 * @generated from protobuf message DetailResponse
 */
export interface DetailResponse {
    /**
     * @generated from protobuf field: string split = 1;
     */
    split: string;
    /**
     * @generated from protobuf field: string tile = 2;
     */
    tile: string;
    /**
     * @generated from protobuf field: string active = 3;
     */
    active: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DetailRequest$Type extends MessageType<DetailRequest> {
    constructor() {
        super("DetailRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "split", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "active", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DetailRequest>): DetailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.split = "";
        message.tile = "";
        message.active = "";
        if (value !== undefined)
            reflectionMergePartial<DetailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailRequest): DetailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string split */ 2:
                    message.split = reader.string();
                    break;
                case /* string tile */ 3:
                    message.tile = reader.string();
                    break;
                case /* string active */ 4:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string split = 2; */
        if (message.split !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.split);
        /* string tile = 3; */
        if (message.tile !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tile);
        /* string active = 4; */
        if (message.active !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DetailRequest
 */
export const DetailRequest = new DetailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailResponse$Type extends MessageType<DetailResponse> {
    constructor() {
        super("DetailResponse", [
            { no: 1, name: "split", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "active", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DetailResponse>): DetailResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.split = "";
        message.tile = "";
        message.active = "";
        if (value !== undefined)
            reflectionMergePartial<DetailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailResponse): DetailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string split */ 1:
                    message.split = reader.string();
                    break;
                case /* string tile */ 2:
                    message.tile = reader.string();
                    break;
                case /* string active */ 3:
                    message.active = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string split = 1; */
        if (message.split !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.split);
        /* string tile = 2; */
        if (message.tile !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tile);
        /* string active = 3; */
        if (message.active !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.active);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DetailResponse
 */
export const DetailResponse = new DetailResponse$Type();
/**
 * @generated ServiceType for protobuf service DetailSectionService
 */
export const DetailSectionService = new ServiceType("DetailSectionService", [
    { name: "UpdateDetailSection", options: {}, I: DetailRequest, O: DetailResponse }
]);
